import { EventEmitter, Component, forwardRef, ChangeDetectionStrategy, ViewChild, Input, Output, NgModule, CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA } from '@angular/core';
import { CommonModule } from '@angular/common';
import * as editor from 'jsoneditor';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';

class JsonEditorOptions {
    constructor() {
        this.enableSort = true;
        this.enableTransform = true;
        this.escapeUnicode = false;
        this.expandAll = false;
        this.sortObjectKeys = false;
        this.history = true;
        this.mode = 'tree';
        this.search = true;
        this.indentation = 2;
    }
}

class JsonEditorComponent {
    constructor() {
        this.id = 'angjsoneditor' + Math.floor(Math.random() * 1000000);
        this.disabled = false;
        this.isFocused = false;
        this.optionsChanged = false;
        this._data = {};
        this.options = new JsonEditorOptions();
        this.debug = false;
        this.change = new EventEmitter();
        this.jsonChange = new EventEmitter();
        // Implemented as part of ControlValueAccessor.
        this.onTouched = () => {
        };
        // Implemented as part of ControlValueAccessor.
        this.onChangeModel = (e) => {
        };
    }
    set data(value) {
        this._data = value;
        if (this.editor) {
            this.editor.destroy();
            this.ngOnInit();
        }
    }
    ngOnInit() {
        let optionsBefore = this.options;
        if (!this.optionsChanged && this.editor) {
            optionsBefore = this.editor.options;
        }
        if (!this.options.onChangeJSON && this.jsonChange) {
            this.options.onChangeJSON = this.onChangeJSON.bind(this);
        }
        if (!this.options.onChange && this.change) {
            this.options.onChange = this.onChange.bind(this);
        }
        const optionsCopy = Object.assign({}, optionsBefore);
        // expandAll is an option only supported by ang-jsoneditor and not by the the original jsoneditor.
        delete optionsCopy.expandAll;
        if (this.debug) {
            console.log(optionsCopy, this._data);
        }
        if (!this.jsonEditorContainer.nativeElement) {
            console.error(`Can't find the ElementRef reference for jsoneditor)`);
        }
        if (optionsCopy.mode === 'text' || optionsCopy.mode === 'code') {
            optionsCopy.onChangeJSON = null;
        }
        this.editor = new editor(this.jsonEditorContainer.nativeElement, optionsCopy, this._data);
        if (this.options.expandAll) {
            this.editor.expandAll();
        }
    }
    ngOnDestroy() {
        this.destroy();
    }
    /**
     * ngModel
     * ControlValueAccessor
     */
    // ControlValueAccessor implementation
    writeValue(value) {
        this.data = value;
    }
    // Implemented as part of ControlValueAccessor
    registerOnChange(fn) {
        this.onChangeModel = fn;
    }
    // Implemented as part of ControlValueAccessor.
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    // Implemented as part of ControlValueAccessor.
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    onChange(e) {
        if (this.editor) {
            try {
                const json = this.editor.get();
                this.onChangeModel(json);
                this.change.emit(json);
            }
            catch (e) {
                if (this.debug) {
                    console.log(e);
                }
            }
        }
    }
    onChangeJSON(e) {
        if (this.editor) {
            try {
                this.jsonChange.emit(this.editor.get());
            }
            catch (e) {
                if (this.debug) {
                    console.log(e);
                }
            }
        }
    }
    /**
     * JSON EDITOR FUNCTIONS
     */
    collapseAll() {
        this.editor.collapseAll();
    }
    expandAll() {
        this.editor.expandAll();
    }
    focus() {
        this.editor.focus();
    }
    get() {
        return this.editor.get();
    }
    getMode() {
        return this.editor.getMode();
    }
    getName() {
        return this.editor.getName();
    }
    getText() {
        return this.editor.getText();
    }
    set(json) {
        this.editor.set(json);
    }
    setMode(mode) {
        this.editor.setMode(mode);
    }
    setName(name) {
        this.editor.setName(name);
    }
    setSelection(start, end) {
        this.editor.setSelection(start, end);
    }
    getSelection() {
        return this.editor.getSelection();
    }
    getValidateSchema() {
        return this.editor.validateSchema;
    }
    setSchema(schema, schemaRefs) {
        this.editor.setSchema(schema, schemaRefs);
    }
    search(query) {
        this.editor.search(query);
    }
    setOptions(newOptions) {
        if (this.editor) {
            this.editor.destroy();
        }
        this.optionsChanged = true;
        this.options = newOptions;
        this.ngOnInit();
    }
    update(json) {
        this.editor.update(json);
    }
    destroy() {
        this.editor.destroy();
    }
    getEditor() {
        return this.editor;
    }
    isValidJson() {
        try {
            JSON.parse(this.getText());
            return true;
        }
        catch (e) {
            return false;
        }
    }
}
JsonEditorComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'json-editor',
                template: `<div [id]="id" #jsonEditorContainer></div>`,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => JsonEditorComponent),
                        multi: true
                    }
                ],
                preserveWhitespaces: false,
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
JsonEditorComponent.ctorParameters = () => [];
JsonEditorComponent.propDecorators = {
    jsonEditorContainer: [{ type: ViewChild, args: ['jsonEditorContainer', { static: true },] }],
    options: [{ type: Input }],
    data: [{ type: Input, args: ['data',] }],
    debug: [{ type: Input }],
    change: [{ type: Output }],
    jsonChange: [{ type: Output }]
};

class NgJsonEditorModule {
    static forRoot() {
        return {
            ngModule: NgJsonEditorModule,
            providers: []
        };
    }
}
NgJsonEditorModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule
                ],
                declarations: [
                    JsonEditorComponent
                ],
                exports: [
                    JsonEditorComponent
                ],
                schemas: [
                    CUSTOM_ELEMENTS_SCHEMA,
                    NO_ERRORS_SCHEMA
                ]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { JsonEditorComponent, JsonEditorOptions, NgJsonEditorModule };
//# sourceMappingURL=maaxgr-ang-jsoneditor.js.map
