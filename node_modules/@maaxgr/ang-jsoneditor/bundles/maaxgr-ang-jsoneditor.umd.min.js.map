{"version":3,"sources":["../../../ang-jsoneditor/src/jsoneditor/jsoneditoroptions.ts","../../../ang-jsoneditor/src/jsoneditor/jsoneditor.component.ts","../../../ang-jsoneditor/src/lib.module.ts"],"names":["this","enableSort","enableTransform","escapeUnicode","expandAll","sortObjectKeys","history","mode","search","indentation","JsonEditorComponent","id","Math","floor","random","disabled","isFocused","optionsChanged","_data","options","JsonEditorOptions","debug","change","EventEmitter","jsonChange","onTouched","onChangeModel","e","Object","defineProperty","prototype","value","editor","destroy","ngOnInit","optionsBefore","onChangeJSON","bind","onChange","optionsCopy","assign","console","log","jsonEditorContainer","nativeElement","error","ngOnDestroy","writeValue","data","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","json","get","emit","collapseAll","focus","getMode","getName","getText","set","setMode","setName","name","setSelection","start","end","getSelection","getValidateSchema","validateSchema","setSchema","schema","schemaRefs","query","setOptions","newOptions","update","getEditor","isValidJson","JSON","parse","Component","args","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","ViewChild","static","Input","Output","NgJsonEditorModule","forRoot","ngModule","NgModule","imports","CommonModule","FormsModule","declarations","exports","schemas","CUSTOM_ELEMENTS_SCHEMA","NO_ERRORS_SCHEMA"],"mappings":"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","sourcesContent":["\nexport type JsonEditorMode = 'tree' | 'view' | 'form' | 'code' | 'text';\n\nexport interface JsonEditorTreeNode {\n  field: String,\n  value: String,\n  path: String[]\n}\n\nexport interface IError {\n  path: (string | number)[];\n  message: string;\n}\n\nexport class JsonEditorOptions {\n  public ace: any;\n  public ajv: Object;\n\n\n  /**\n   *   {function} onChange  Callback method, triggered\n  on change of contents.\n  Does not pass the contents itself.\n  See also `onChangeJSON` and\n  `onChangeText`.\n   */\n  public onChange: () => void;\n\n  /**\n*   // {function} onChangeJSON  Callback method, triggered\n//     in modes on change of contents,\n//     passing the changed contents\n//     as JSON.\n//     Only applicable for modes\n//     'tree', 'view', and 'form'.\n*/\n  public onChangeJSON: () => void;\n\n\n  public onNodeName: () => void;\n  public onCreateMenu: () => void;\n  public onColorPicker: () => void;\n\n  /**\n*   // {function} onChangeText  Callback method, triggered\n//     in modes on change of contents,\n//     passing the changed contents\n//     as stringified JSON.\n*/\n  public onChangeText: (jsonstr:string) => void;\n\n\n  /**\n   *   {function} onSelectionChange Callback method,\n  triggered on node selection change\n  Only applicable for modes\n  'tree', 'view', and 'form'\n   */\n  public onSelectionChange: () => void;\n\n  /**\n*     {function} onTextSelectionChange Callback method,\n  triggered on text selection change\n  Only applicable for modes\n*/\n  public onTextSelectionChange: () => void;\n\n\n  /**\n   *   // {function} onEvent Callback method, triggered\n    // when an event occurs in\n    // a JSON field or value.\n    // Only applicable for\n    // modes 'form', 'tree' and\n    // 'view'\n   */\n  public onEvent: () => void;\n\n  /**\n* // *   {function} onFocus  Callback method, triggered\n//  when the editor comes into focus,\n//  passing an object {type, target},\n//  Applicable for all modes\n*/\n  public onFocus: () => void;\n\n  // *   {function} onBlur   Callback method, triggered\n  //  when the editor goes out of focus,\n  //  passing an object {type, target},\n  //  Applicable for all modes\n  public onBlur: () => void;\n\n  /**\n*  // *   {function} onClassName Callback method, triggered\n// when a Node DOM is rendered. Function returns\n// a css class name to be set on a node.\n// Only applicable for\n// modes 'form', 'tree' and\n// 'view'\n*/\n  public onClassName: () => void;\n\n  public onEditable: (node: JsonEditorTreeNode | {}) => boolean | { field: boolean, value: boolean };\n\n  /**\n   *   {function} onError   Callback method, triggered\n  when an error occurs\n   */\n  public onError: (error: any) => void;\n  public onModeChange: (newMode: JsonEditorMode, oldMode: JsonEditorMode) => void;\n  public onValidate: (json: Object) => IError[];\n  public onValidationError: (errors: object[]) => void;\n\n  public enableSort: boolean;\n  public enableTransform: boolean;\n  public escapeUnicode: boolean;\n  public expandAll: boolean;\n  public sortObjectKeys: boolean;\n  public history: boolean;\n  public mode: JsonEditorMode;\n  public modes: JsonEditorMode[];\n  public name: String;\n  public schema: Object;\n  public search: boolean;\n  public indentation: Number;\n  public template: Object;\n  public theme: Number;\n  public language: String;\n  public languages: Object;\n\n  /**\n   * Adds main menu bar - Contains format, sort, transform, search etc. functionality. True\n   * by default. Applicable in all types of mode.\n   */\n  public mainMenuBar: boolean;\n\n  /**\n   * Adds navigation bar to the menu - the navigation bar visualize the current position on\n   * the tree structure as well as allows breadcrumbs navigation.\n   * True by default.\n   * Only applicable when mode is 'tree', 'form' or 'view'.\n   */\n  public navigationBar: boolean;\n\n  /**\n   * Adds status bar to the bottom of the editor - the status bar shows the cursor position\n   * and a count of the selected characters.\n   * True by default.\n   * Only applicable when mode is 'code' or 'text'.\n   */\n  public statusBar: boolean;\n\n  constructor() {\n    this.enableSort = true;\n    this.enableTransform = true;\n    this.escapeUnicode = false;\n    this.expandAll = false;\n    this.sortObjectKeys = false;\n    this.history = true;\n    this.mode = 'tree';\n    this.search = true;\n    this.indentation = 2;\n  }\n}\n","import {\n  Component, ElementRef, Input, OnInit, OnDestroy, ViewChild,\n  Output, EventEmitter, forwardRef, ChangeDetectionStrategy\n} from '@angular/core';\nimport * as editor from 'jsoneditor';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { JsonEditorOptions, JsonEditorMode, JsonEditorTreeNode, IError } from './jsoneditoroptions';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'json-editor',\n  template: `<div [id]=\"id\" #jsonEditorContainer></div>`,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => JsonEditorComponent),\n      multi: true\n    }\n  ],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class JsonEditorComponent implements ControlValueAccessor, OnInit, OnDestroy {\n  private editor: any;\n  public id = 'angjsoneditor' + Math.floor(Math.random() * 1000000);\n  disabled = false;\n  isFocused = false;\n\n  public optionsChanged = false;\n\n  @ViewChild('jsonEditorContainer', { static: true }) jsonEditorContainer: ElementRef;\n\n  private _data: Object = {};\n\n  @Input() options: JsonEditorOptions = new JsonEditorOptions();\n  @Input('data')\n  set data(value: Object) {\n    this._data = value;\n    if (this.editor) {\n      this.editor.destroy();\n      this.ngOnInit();\n    }\n  }\n  @Input() debug: boolean = false;\n\n  @Output()\n  change: EventEmitter<any> = new EventEmitter<any>();\n  @Output()\n  jsonChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor() { }\n\n\n  ngOnInit() {\n    let optionsBefore = this.options;\n    if (!this.optionsChanged && this.editor) {\n      optionsBefore = this.editor.options;\n    }\n\n    if (!this.options.onChangeJSON && this.jsonChange) {\n      this.options.onChangeJSON = this.onChangeJSON.bind(this);\n    }\n    if (!this.options.onChange && this.change) {\n      this.options.onChange = this.onChange.bind(this);\n    }\n    const optionsCopy = Object.assign({}, optionsBefore);\n\n    // expandAll is an option only supported by ang-jsoneditor and not by the the original jsoneditor.\n    delete optionsCopy.expandAll;\n    if (this.debug) {\n      console.log(optionsCopy, this._data);\n    }\n    if (!this.jsonEditorContainer.nativeElement) {\n      console.error(`Can't find the ElementRef reference for jsoneditor)`);\n    }\n\n    if (optionsCopy.mode === 'text' || optionsCopy.mode === 'code') {\n      optionsCopy.onChangeJSON = null;\n    }\n    this.editor = new editor(this.jsonEditorContainer.nativeElement, optionsCopy, this._data);\n\n    if (this.options.expandAll) {\n      this.editor.expandAll();\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroy();\n  }\n\n\n  /**\n   * ngModel\n   * ControlValueAccessor\n   */\n\n  // ControlValueAccessor implementation\n  writeValue(value: any) {\n    this.data = value;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnChange(fn) {\n    this.onChangeModel = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  private onTouched = () => {\n  };\n\n  // Implemented as part of ControlValueAccessor.\n  private onChangeModel = (e) => {\n  };\n\n  public onChange(e) {\n    if (this.editor) {\n      try {\n        const json = this.editor.get();\n        this.onChangeModel(json);\n        this.change.emit(json);\n      } catch (e) {\n        if (this.debug) {\n          console.log(e);\n        }\n      }\n    }\n  }\n\n  public onChangeJSON(e) {\n    if (this.editor) {\n      try {\n        this.jsonChange.emit(this.editor.get());\n      } catch (e) {\n        if (this.debug) {\n          console.log(e);\n        }\n      }\n    }\n  }\n\n\n  /**\n   * JSON EDITOR FUNCTIONS\n   */\n\n  public collapseAll() {\n    this.editor.collapseAll();\n  }\n\n  public expandAll() {\n    this.editor.expandAll();\n  }\n\n  public focus() {\n    this.editor.focus();\n  }\n\n  public get(): JSON {\n    return this.editor.get();\n  }\n\n  public getMode(): JsonEditorMode {\n    return this.editor.getMode() as JsonEditorMode;\n  }\n\n  public getName(): string {\n    return this.editor.getName();\n  }\n\n  public getText(): string {\n    return this.editor.getText();\n  }\n\n  public set(json: JSON) {\n    this.editor.set(json);\n  }\n\n  public setMode(mode: JsonEditorMode) {\n    this.editor.setMode(mode);\n  }\n\n  public setName(name: string) {\n    this.editor.setName(name);\n  }\n\n  public setSelection(start, end) {\n    this.editor.setSelection(start, end);\n  }\n\n  public getSelection(): any {\n    return this.editor.getSelection();\n  }\n\n  public getValidateSchema(): any {\n    return this.editor.validateSchema;\n  }\n\n  public setSchema(schema: any, schemaRefs: any) {\n    this.editor.setSchema(schema, schemaRefs);\n  }\n\n  public search(query: string) {\n    this.editor.search(query);\n  }\n\n  public setOptions(newOptions: JsonEditorOptions) {\n    if (this.editor) {\n      this.editor.destroy();\n    }\n    this.optionsChanged = true;\n    this.options = newOptions;\n    this.ngOnInit();\n  }\n\n  public update(json: JSON) {\n    this.editor.update(json);\n  }\n\n  public destroy() {\n    this.editor.destroy();\n  }\n\n  public getEditor(){\n    return this.editor;\n  }\n\n  public isValidJson() {\n    try {\n      JSON.parse(this.getText());\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n}\n\nexport { JsonEditorOptions, JsonEditorMode, JsonEditorTreeNode, IError };\n","import { NgModule, ModuleWithProviders, CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { JsonEditorComponent } from './jsoneditor/jsoneditor.component';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule\n  ],\n  declarations: [\n    JsonEditorComponent\n  ],\n  exports: [\n    JsonEditorComponent\n  ],\n  schemas: [\n    CUSTOM_ELEMENTS_SCHEMA,\n    NO_ERRORS_SCHEMA\n  ]\n})\nexport class NgJsonEditorModule {\n\n  public static forRoot(): ModuleWithProviders<any> {\n\n    return {\n      ngModule: NgJsonEditorModule,\n      providers: [\n      ]\n    };\n  }\n}\n"]}